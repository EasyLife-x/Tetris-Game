# tetromino.py - Класс для представления тетрамино (фигур в Тетрисе)

# Импортируем модуль для генерации случайных чисел и константы
import random
from constants import SHAPES, COLORS_3D  # Импортируем формы и цвета из констант


class Tetromino:
    """Класс для представления тетрамино - игровых фигур в Тетрисе"""

    def __init__(self, x, y):
        """
        Инициализация тетрамино
        x: начальная координата X (горизонтальная позиция)
        y: начальная координата Y (вертикальная позиция)
        """
        self.x = x  # Текущая X-координата фигуры
        self.y = y  # Текущая Y-координата фигуры

        # Генерируем случайный индекс для выбора формы фигуры
        self.shape_idx = random.randint(0, len(SHAPES) - 1)

        # Выбираем форму фигуры по случайному индексу
        self.shape = SHAPES[self.shape_idx]

        # Выбираем цвет фигуры по тому же индексу
        self.color = COLORS_3D[self.shape_idx]

        self.rotation = 0  # Текущий угол поворота фигуры (пока не используется)

    def rotate(self):
        """
        Поворот фигуры на 90 градусов по часовой стрелке
        Возвращает новую форму фигуры после поворота
        """
        # Получаем размеры текущей формы
        rows = len(self.shape)  # Количество строк в текущей форме
        cols = len(self.shape[0])  # Количество столбцов в текущей форме

        # Создаем новую матрицу для повернутой формы
        # После поворота строки становятся столбцами
        rotated = [[0 for _ in range(rows)] for _ in range(cols)]

        # Выполняем поворот матрицы на 90 градусов по часовой стрелке
        for r in range(rows):  # Проходим по каждой строке
            for c in range(cols):  # Проходим по каждому столбцу
                # Формула поворота: новая позиция [c][rows-1-r] = старая позиция [r][c]
                rotated[c][rows - 1 - r] = self.shape[r][c]

        return rotated  # Возвращаем повернутую форму

    def get_positions(self):
        """
        Получение всех позиций ячеек фигуры относительно игрового поля
        Возвращает список кортежей (x, y) с координатами занятых ячеек
        """
        positions = []  # Список для хранения позиций ячеек

        # Проходим по каждой строке формы фигуры
        for y, row in enumerate(self.shape):
            # Проходим по каждому элементу в строке
            for x, cell in enumerate(row):
                # Если ячейка занята (равна 1)
                if cell:
                    # Добавляем абсолютные координаты ячейки на игровом поле
                    positions.append((self.x + x, self.y + y))

        return positions  # Возвращаем список всех позиций занятых ячеек